import java.io.*;
import java.util.*;

/**
 *
 * @author Kaiyuan
 */
public class MadokaAndChildishPranks {

    public static void main(String[] args) {
        Kattio io = new Kattio();
        int t = io.nextInt();
        for (int tests = 0; tests < t; tests++) {

            int n = io.nextInt();
            int m = io.nextInt();
            int[][] grid = new int[n][m];
            int operations = 0;
            for (int i = 0; i < n; i++) {
                String l = io.next();
                for (int j = 0; j < m; j++) {
                    grid[i][j] = Integer.parseInt(l.charAt(j) + "");
                    if (l.charAt(j) == '1') {
                        operations++;
                    }
                }
            }
            if (grid[0][0] == 1) {
                System.out.println("-1");
                continue;
            }
            //
            System.out.println(operations);
            if (n > 1) {
                for (int i = n; i >= 2; i--) {
                    for (int j = m; j  >= 1; j--) {
                        if (grid[i-1][j-1] == 1) {
                            System.out.println((i-1) + " " + (j) + " " + (i) + " " + (j));
                        }
                    }
                }
            }
            // something special for first row
            for (int j = m - 1; j >= 0; j--) {
                if (grid[0][j] == 1) {
                    System.out.println(1 + " " + (j) + " " + 1 + " " + (j+1));
                }
            }
        }

    }

    static class Kattio extends PrintWriter {

        private BufferedReader r;
        private StringTokenizer st;
        // standard input

        public Kattio() {
            this(System.in, System.out);
        }

        public Kattio(InputStream i, OutputStream o) {
            super(o);
            r = new BufferedReader(new InputStreamReader(i));
        }
        // USACO-style file input

        public Kattio(String problemName) throws IOException {
            super(problemName + ".out");
            r = new BufferedReader(new FileReader(problemName + ".in"));
        }
        // returns null if no more input

        public String next() {
            try {
                while (st == null || !st.hasMoreTokens()) {
                    st = new StringTokenizer(r.readLine());
                }
                return st.nextToken();
            } catch (Exception e) {
            }
            return null;
        }

        public int nextInt() {
            return Integer.parseInt(next());
        }

        public double nextDouble() {
            return Double.parseDouble(next());
        }

        public long nextLong() {
            return Long.parseLong(next());
        }
    }
}
