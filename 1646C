import java.util.*;
import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.io.PrintWriter;
import java.util.StringTokenizer;

/**
 *
 * @author Kaiyuan
 */
public class FactorialsAndPowersOfTwo {

    static long[] factorials = new long[15];

    public static long sums(boolean[] arr) {
        long sum = 0;
        for (int i = 3; i < 15; i++) {
            if (arr[i]) {
                sum += factorials[i];
            }
        }
        return sum;
    }

    public static long ones(long n) {
        long count = Long.bitCount(n);
        return count;
    }

    public static void main(String[] args) {
        Kattio io = new Kattio();
        int t = io.nextInt();
        for (int a = 0; a < t; a++) {

            long n = io.nextLong();
            factorials[0] = 1;
            factorials[1] = 1;
            for (int i = 2; i < 15; i++) {
                factorials[i] = factorials[i - 1] * i;
            }
            //
            long minK = Long.MAX_VALUE;
            for (int i = 0; i < Math.pow(2, 15); i++) {
                String bin = Integer.toBinaryString(i);
                while (bin.length() < 15) {
                    bin = "0" + bin;
                }
                char[] chars = bin.toCharArray();
                boolean[] boolArray = new boolean[15];
                for (int j = 0; j < chars.length; j++) {
                    boolArray[j] = chars[j] == '0' ? true : false;
                }
                int f = 0;
                for (int j = 3; j < 15; j++) {
                    if (boolArray[j]) {
                        f++;
                    }
                }
                minK = Math.min(f + ones(n - sums(boolArray)), minK);
            }
            System.out.println(minK);
        }
    }

    static class Kattio extends PrintWriter {

        private BufferedReader r;
        private StringTokenizer st;
        // standard input

        public Kattio() {
            this(System.in, System.out);
        }

        public Kattio(InputStream i, OutputStream o) {
            super(o);
            r = new BufferedReader(new InputStreamReader(i));
        }
        // USACO-style file input

        public Kattio(String problemName) throws IOException {
            super(problemName + ".out");
            r = new BufferedReader(new FileReader(problemName + ".in"));
        }
        // returns null if no more input

        public String next() {
            try {
                while (st == null || !st.hasMoreTokens()) {
                    st = new StringTokenizer(r.readLine());
                }
                return st.nextToken();
            } catch (Exception e) {
            }
            return null;
        }

        public int nextInt() {
            return Integer.parseInt(next());
        }

        public double nextDouble() {
            return Double.parseDouble(next());
        }

        public long nextLong() {
            return Long.parseLong(next());
        }
    }
}
