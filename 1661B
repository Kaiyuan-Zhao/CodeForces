import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.io.PrintWriter;
import java.util.StringTokenizer;

/**
 *
 * @author Kaiyuan
 */
public class GettingZero {

    public static void main(String[] args) {
        Kattio io = new Kattio();
        int n = io.nextInt();
        int[] a = new int[n];
        for (int i = 0; i < n; i++) {
            a[i] = io.nextInt();
        }

        for (int i = 0; i < n; i++) {
            int v = a[i];
            int minOp = 15;
            for (int j = 0; j <= 15; j++) {
                for (int k = 0; k <= 15-j; k++) {
                    v = (int) ((a[i]+j) * Math.pow(2, k));
                    if (v % 32768 == 0) {
                        minOp = Math.min(minOp, j + k);
                    }
                    
                }
            }
            System.out.println(minOp);
        }
    }

    static class Kattio extends PrintWriter { // Input + Output Class

        private BufferedReader r;
        private StringTokenizer st;
        // standard input

        public Kattio() {
            this(System.in, System.out);
        }

        public Kattio(InputStream i, OutputStream o) {
            super(o);
            r = new BufferedReader(new InputStreamReader(i));
        }
        // USACO-style file input

        public Kattio(String problemName) throws IOException {
            super(problemName + ".out");
            r = new BufferedReader(new FileReader(problemName + ".in"));
        }
        // returns null if no more input

        public String next() {
            try {
                while (st == null || !st.hasMoreTokens()) {
                    st = new StringTokenizer(r.readLine());
                }
                return st.nextToken();
            } catch (Exception e) {
            }
            return null;
        }

        public int nextInt() {
            return Integer.parseInt(next());
        }

        public double nextDouble() {
            return Double.parseDouble(next());
        }

        public long nextLong() {
            return Long.parseLong(next());
        }
    }
}
