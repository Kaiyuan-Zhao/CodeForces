import java.util.*;
import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.io.PrintWriter;
import java.util.StringTokenizer;

/**
 *
 * @author Kaiyuan
 */
public class IQtest {

    public static void main(String[] args) {
        Kattio io = new Kattio();
        int n = io.nextInt();
        int[] numbers = new int[n];

        for (int i = 0; i < n; i++) {
            numbers[i] = io.nextInt();
        }

        // process
        int lastOdd = 0;
        int lastEven = 0;
        int countOdd = 0;
        int countEven = 0;
        for (int a = 0; a < n; a++) {
            if (numbers[a] % 2 == 0) {
                lastEven = a;
                countEven++;
            } else {
                lastOdd = a;
                countOdd++;
            }
        }
        if (countOdd == 1) {
            System.out.println(lastOdd + 1);
        } else {
            System.out.println(lastEven + 1);
        }
    }

    static class Kattio extends PrintWriter {

        private BufferedReader r;
        private StringTokenizer st;
        // standard input

        public Kattio() {
            this(System.in, System.out);
        }

        public Kattio(InputStream i, OutputStream o) {
            super(o);
            r = new BufferedReader(new InputStreamReader(i));
        }
        // USACO-style file input

        public Kattio(String problemName) throws IOException {
            super(problemName + ".out");
            r = new BufferedReader(new FileReader(problemName + ".in"));
        }
        // returns null if no more input

        public String next() {
            try {
                while (st == null || !st.hasMoreTokens()) {
                    st = new StringTokenizer(r.readLine());
                }
                return st.nextToken();
            } catch (Exception e) {
            }
            return null;
        }

        public int nextInt() {
            return Integer.parseInt(next());
        }

        public double nextDouble() {
            return Double.parseDouble(next());
        }

        public long nextLong() {
            return Long.parseLong(next());
        }
    }
}
